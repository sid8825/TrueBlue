var mod_pagespeed_c7eu5dmQBg = "/* =========================================================\n * bootstrap-datepicker.js\n * Repo: https://github.com/eternicode/bootstrap-datepicker/\n * Demo: http://eternicode.github.io/bootstrap-datepicker/\n * Docs: http://bootstrap-datepicker.readthedocs.org/\n * Forked from http://www.eyecon.ro/bootstrap-datepicker\n * =========================================================\n * Started by Stefan Petre; improvements by Andrew Rowls + contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n\n(function($, undefined){\n\n	var $window = $(window);\n\n	function UTCDate(){\n		return new Date(Date.UTC.apply(Date, arguments));\n	}\n	function UTCToday(){\n		var today = new Date();\n		return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());\n	}\n	function alias(method){\n		return function(){\n			return this[method].apply(this, arguments);\n		};\n	}\n\n	var DateArray = (function(){\n		var extras = {\n			get: function(i){\n				return this.slice(i)[0];\n			},\n			contains: function(d){\n				// Array.indexOf is not cross-browser;\n				// $.inArray doesn't work with Dates\n				var val = d && d.valueOf();\n				for (var i=0, l=this.length; i < l; i++)\n					if (this[i].valueOf() === val)\n						return i;\n				return -1;\n			},\n			remove: function(i){\n				this.splice(i,1);\n			},\n			replace: function(new_array){\n				if (!new_array)\n					return;\n				if (!$.isArray(new_array))\n					new_array = [new_array];\n				this.clear();\n				this.push.apply(this, new_array);\n			},\n			clear: function(){\n				this.splice(0);\n			},\n			copy: function(){\n				var a = new DateArray();\n				a.replace(this);\n				return a;\n			}\n		};\n\n		return function(){\n			var a = [];\n			a.push.apply(a, arguments);\n			$.extend(a, extras);\n			return a;\n		};\n	})();\n\n\n	// Picker object\n\n	var Datepicker = function(element, options){\n		this.dates = new DateArray();\n		this.viewDate = UTCToday();\n		this.focusDate = null;\n\n		this._process_options(options);\n\n		this.element = $(element);\n		this.isInline = false;\n		this.isInput = this.element.is('input');\n		this.component = this.element.is('.date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;\n		this.hasInput = this.component && this.element.find('input').length;\n		if (this.component && this.component.length === 0)\n			this.component = false;\n\n		this.picker = $(DPGlobal.template);\n		this._buildEvents();\n		this._attachEvents();\n\n		if (this.isInline){\n			this.picker.addClass('datepicker-inline').appendTo(this.element);\n		}\n		else {\n			this.picker.addClass('datepicker-dropdown dropdown-menu');\n		}\n\n		if (this.o.rtl){\n			this.picker.addClass('datepicker-rtl');\n		}\n\n		this.viewMode = this.o.startView;\n\n		if (this.o.calendarWeeks)\n			this.picker.find('tfoot th.today')\n						.attr('colspan', function(i, val){\n							return parseInt(val) + 1;\n						});\n\n		this._allow_update = false;\n\n		this.setStartDate(this._o.startDate);\n		this.setEndDate(this._o.endDate);\n		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);\n\n		this.fillDow();\n		this.fillMonths();\n\n		this._allow_update = true;\n\n		this.update();\n		this.showMode();\n\n		if (this.isInline){\n			this.show();\n		}\n	};\n\n	Datepicker.prototype = {\n		constructor: Datepicker,\n\n		_process_options: function(opts){\n			// Store raw options for reference\n			this._o = $.extend({}, this._o, opts);\n			// Processed options\n			var o = this.o = $.extend({}, this._o);\n\n			// Check if \"de-DE\" style date is available, if not language should\n			// fallback to 2 letter code eg \"de\"\n			var lang = o.language;\n			if (!dates[lang]){\n				lang = lang.split('-')[0];\n				if (!dates[lang])\n					lang = defaults.language;\n			}\n			o.language = lang;\n\n			switch (o.startView){\n				case 2:\n				case 'decade':\n					o.startView = 2;\n					break;\n				case 1:\n				case 'year':\n					o.startView = 1;\n					break;\n				default:\n					o.startView = 0;\n			}\n\n			switch (o.minViewMode){\n				case 1:\n				case 'months':\n					o.minViewMode = 1;\n					break;\n				case 2:\n				case 'years':\n					o.minViewMode = 2;\n					break;\n				default:\n					o.minViewMode = 0;\n			}\n\n			o.startView = Math.max(o.startView, o.minViewMode);\n\n			// true, false, or Number > 0\n			if (o.multidate !== true){\n				o.multidate = Number(o.multidate) || false;\n				if (o.multidate !== false)\n					o.multidate = Math.max(0, o.multidate);\n				else\n					o.multidate = 1;\n			}\n			o.multidateSeparator = String(o.multidateSeparator);\n\n			o.weekStart %= 7;\n			o.weekEnd = ((o.weekStart + 6) % 7);\n\n			var format = DPGlobal.parseFormat(o.format);\n			if (o.startDate !== -Infinity){\n				if (!!o.startDate){\n					if (o.startDate instanceof Date)\n						o.startDate = this._local_to_utc(this._zero_time(o.startDate));\n					else\n						o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);\n				}\n				else {\n					o.startDate = -Infinity;\n				}\n			}\n			if (o.endDate !== Infinity){\n				if (!!o.endDate){\n					if (o.endDate instanceof Date)\n						o.endDate = this._local_to_utc(this._zero_time(o.endDate));\n					else\n						o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);\n				}\n				else {\n					o.endDate = Infinity;\n				}\n			}\n\n			o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];\n			if (!$.isArray(o.daysOfWeekDisabled))\n				o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\\s]*/);\n			o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function(d){\n				return parseInt(d, 10);\n			});\n\n			var plc = String(o.orientation).toLowerCase().split(/\\s+/g),\n				_plc = o.orientation.toLowerCase();\n			plc = $.grep(plc, function(word){\n				return (/^auto|left|right|top|bottom$/).test(word);\n			});\n			o.orientation = {x: 'auto', y: 'auto'};\n			if (!_plc || _plc === 'auto')\n				; // no action\n			else if (plc.length === 1){\n				switch (plc[0]){\n					case 'top':\n					case 'bottom':\n						o.orientation.y = plc[0];\n						break;\n					case 'left':\n					case 'right':\n						o.orientation.x = plc[0];\n						break;\n				}\n			}\n			else {\n				_plc = $.grep(plc, function(word){\n					return (/^left|right$/).test(word);\n				});\n				o.orientation.x = _plc[0] || 'auto';\n\n				_plc = $.grep(plc, function(word){\n					return (/^top|bottom$/).test(word);\n				});\n				o.orientation.y = _plc[0] || 'auto';\n			}\n		},\n		_events: [],\n		_secondaryEvents: [],\n		_applyEvents: function(evs){\n			for (var i=0, el, ch, ev; i < evs.length; i++){\n				el = evs[i][0];\n				if (evs[i].length === 2){\n					ch = undefined;\n					ev = evs[i][1];\n				}\n				else if (evs[i].length === 3){\n					ch = evs[i][1];\n					ev = evs[i][2];\n				}\n				el.on(ev, ch);\n			}\n		},\n		_unapplyEvents: function(evs){\n			for (var i=0, el, ev, ch; i < evs.length; i++){\n				el = evs[i][0];\n				if (evs[i].length === 2){\n					ch = undefined;\n					ev = evs[i][1];\n				}\n				else if (evs[i].length === 3){\n					ch = evs[i][1];\n					ev = evs[i][2];\n				}\n				el.off(ev, ch);\n			}\n		},\n		_buildEvents: function(){\n			if (this.isInput){ // single input\n				this._events = [\n					[this.element, {\n						focus: $.proxy(this.show, this),\n						keyup: $.proxy(function(e){\n							if ($.inArray(e.keyCode, [27,37,39,38,40,32,13,9]) === -1)\n								this.update();\n						}, this),\n						keydown: $.proxy(this.keydown, this)\n					}]\n				];\n			}\n			else if (this.component && this.hasInput){ // component: input + button\n				this._events = [\n					// For components that are not readonly, allow keyboard nav\n					[this.element.find('input'), {\n						focus: $.proxy(this.show, this),\n						keyup: $.proxy(function(e){\n							if ($.inArray(e.keyCode, [27,37,39,38,40,32,13,9]) === -1)\n								this.update();\n						}, this),\n						keydown: $.proxy(this.keydown, this)\n					}],\n					[this.component, {\n						click: $.proxy(this.show, this)\n					}]\n				];\n			}\n			else if (this.element.is('div')){  // inline datepicker\n				this.isInline = true;\n			}\n			else {\n				this._events = [\n					[this.element, {\n						click: $.proxy(this.show, this)\n					}]\n				];\n			}\n			this._events.push(\n				// Component: listen for blur on element descendants\n				[this.element, '*', {\n					blur: $.proxy(function(e){\n						this._focused_from = e.target;\n					}, this)\n				}],\n				// Input: listen for blur on element\n				[this.element, {\n					blur: $.proxy(function(e){\n						this._focused_from = e.target;\n					}, this)\n				}]\n			);\n\n			this._secondaryEvents = [\n				[this.picker, {\n					click: $.proxy(this.click, this)\n				}],\n				[$(window), {\n					resize: $.proxy(this.place, this)\n				}],\n				[$(document), {\n					'mousedown touchstart': $.proxy(function(e){\n						// Clicked outside the datepicker, hide it\n						if (!(\n							this.element.is(e.target) ||\n							this.element.find(e.target).length ||\n							this.picker.is(e.target) ||\n							this.picker.find(e.target).length\n						)){\n							this.hide();\n						}\n					}, this)\n				}]\n			];\n		},\n		_attachEvents: function(){\n			this._detachEvents();\n			this._applyEvents(this._events);\n		},\n		_detachEvents: function(){\n			this._unapplyEvents(this._events);\n		},\n		_attachSecondaryEvents: function(){\n			this._detachSecondaryEvents();\n			this._applyEvents(this._secondaryEvents);\n		},\n		_detachSecondaryEvents: function(){\n			this._unapplyEvents(this._secondaryEvents);\n		},\n		_trigger: function(event, altdate){\n			var date = altdate || this.dates.get(-1),\n				local_date = this._utc_to_local(date);\n\n			this.element.trigger({\n				type: event,\n				date: local_date,\n				dates: $.map(this.dates, this._utc_to_local),\n				format: $.proxy(function(ix, format){\n					if (arguments.length === 0){\n						ix = this.dates.length - 1;\n						format = this.o.format;\n					}\n					else if (typeof ix === 'string'){\n						format = ix;\n						ix = this.dates.length - 1;\n					}\n					format = format || this.o.format;\n					var date = this.dates.get(ix);\n					return DPGlobal.formatDate(date, format, this.o.language);\n				}, this)\n			});\n		},\n\n		show: function(){\n			if (!this.isInline)\n				this.picker.appendTo('body');\n			this.picker.show();\n			this.place();\n			this._attachSecondaryEvents();\n			this._trigger('show');\n		},\n\n		hide: function(){\n			if (this.isInline)\n				return;\n			if (!this.picker.is(':visible'))\n				return;\n			this.focusDate = null;\n			this.picker.hide().detach();\n			this._detachSecondaryEvents();\n			this.viewMode = this.o.startView;\n			this.showMode();\n\n			if (\n				this.o.forceParse &&\n				(\n					this.isInput && this.element.val() ||\n					this.hasInput && this.element.find('input').val()\n				)\n			)\n				this.setValue();\n			this._trigger('hide');\n		},\n\n		remove: function(){\n			this.hide();\n			this._detachEvents();\n			this._detachSecondaryEvents();\n			this.picker.remove();\n			delete this.element.data().datepicker;\n			if (!this.isInput){\n				delete this.element.data().date;\n			}\n		},\n\n		_utc_to_local: function(utc){\n			return utc && new Date(utc.getTime() + (utc.getTimezoneOffset()*60000));\n		},\n		_local_to_utc: function(local){\n			return local && new Date(local.getTime() - (local.getTimezoneOffset()*60000));\n		},\n		_zero_time: function(local){\n			return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());\n		},\n		_zero_utc_time: function(utc){\n			return utc && new Date(Date.UTC(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()));\n		},\n\n		getDates: function(){\n			return $.map(this.dates, this._utc_to_local);\n		},\n\n		getUTCDates: function(){\n			return $.map(this.dates, function(d){\n				return new Date(d);\n			});\n		},\n\n		getDate: function(){\n			return this._utc_to_local(this.getUTCDate());\n		},\n\n		getUTCDate: function(){\n			return new Date(this.dates.get(-1));\n		},\n\n		setDates: function(){\n			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;\n			this.update.apply(this, args);\n			this._trigger('changeDate');\n			this.setValue();\n		},\n\n		setUTCDates: function(){\n			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;\n			this.update.apply(this, $.map(args, this._utc_to_local));\n			this._trigger('changeDate');\n			this.setValue();\n		},\n\n		setDate: alias('setDates'),\n		setUTCDate: alias('setUTCDates'),\n\n		setValue: function(){\n			var formatted = this.getFormattedDate();\n			if (!this.isInput){\n				if (this.component){\n					this.element.find('input').val(formatted).change();\n				}\n			}\n			else {\n				this.element.val(formatted).change();\n			}\n		},\n\n		getFormattedDate: function(format){\n			if (format === undefined)\n				format = this.o.format;\n\n			var lang = this.o.language;\n			return $.map(this.dates, function(d){\n				return DPGlobal.formatDate(d, format, lang);\n			}).join(this.o.multidateSeparator);\n		},\n\n		setStartDate: function(startDate){\n			this._process_options({startDate: startDate});\n			this.update();\n			this.updateNavArrows();\n		},\n\n		setEndDate: function(endDate){\n			this._process_options({endDate: endDate});\n			this.update();\n			this.updateNavArrows();\n		},\n\n		setDaysOfWeekDisabled: function(daysOfWeekDisabled){\n			this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});\n			this.update();\n			this.updateNavArrows();\n		},\n\n		place: function(){\n			if (this.isInline)\n				return;\n			var calendarWidth = this.picker.outerWidth(),\n				calendarHeight = this.picker.outerHeight(),\n				visualPadding = 10,\n				windowWidth = $window.width(),\n				windowHeight = $window.height(),\n				scrollTop = $window.scrollTop();\n\n			var zIndex = parseInt(this.element.parents().filter(function(){\n					return $(this).css('z-index') !== 'auto';\n				}).first().css('z-index'))+10;\n			var offset = this.component ? this.component.parent().offset() : this.element.offset();\n			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);\n			var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);\n			var left = offset.left,\n				top = offset.top;\n\n			this.picker.removeClass(\n				'datepicker-orient-top datepicker-orient-bottom '+\n				'datepicker-orient-right datepicker-orient-left'\n			);\n\n			if (this.o.orientation.x !== 'auto'){\n				this.picker.addClass('datepicker-orient-' + this.o.orientation.x);\n				if (this.o.orientation.x === 'right')\n					left -= calendarWidth - width;\n			}\n			// auto x orientation is best-placement: if it crosses a window\n			// edge, fudge it sideways\n			else {\n				// Default to left\n				this.picker.addClass('datepicker-orient-left');\n				if (offset.left < 0)\n					left -= offset.left - visualPadding;\n				else if (offset.left + calendarWidth > windowWidth)\n					left = windowWidth - calendarWidth - visualPadding;\n			}\n\n			// auto y orientation is best-situation: top or bottom, no fudging,\n			// decision based on which shows more of the calendar\n			var yorient = this.o.orientation.y,\n				top_overflow, bottom_overflow;\n			if (yorient === 'auto'){\n				top_overflow = -scrollTop + offset.top - calendarHeight;\n				bottom_overflow = scrollTop + windowHeight - (offset.top + height + calendarHeight);\n				if (Math.max(top_overflow, bottom_overflow) === bottom_overflow)\n					yorient = 'top';\n				else\n					yorient = 'bottom';\n			}\n			this.picker.addClass('datepicker-orient-' + yorient);\n			if (yorient === 'top')\n				top += height;\n			else\n				top -= calendarHeight + parseInt(this.picker.css('padding-top'));\n\n			this.picker.css({\n				top: top,\n				left: left,\n				zIndex: zIndex\n			});\n		},\n\n		_allow_update: true,\n		update: function(){\n			if (!this._allow_update)\n				return;\n\n			var oldDates = this.dates.copy(),\n				dates = [],\n				fromArgs = false;\n			if (arguments.length){\n				$.each(arguments, $.proxy(function(i, date){\n					if (date instanceof Date)\n						date = this._local_to_utc(date);\n					dates.push(date);\n				}, this));\n				fromArgs = true;\n			}\n			else {\n				dates = this.isInput\n						? this.element.val()\n						: this.element.data('date') || this.element.find('input').val();\n				if (dates && this.o.multidate)\n					dates = dates.split(this.o.multidateSeparator);\n				else\n					dates = [dates];\n				delete this.element.data().date;\n			}\n\n			dates = $.map(dates, $.proxy(function(date){\n				return DPGlobal.parseDate(date, this.o.format, this.o.language);\n			}, this));\n			dates = $.grep(dates, $.proxy(function(date){\n				return (\n					date < this.o.startDate ||\n					date > this.o.endDate ||\n					!date\n				);\n			}, this), true);\n			this.dates.replace(dates);\n\n			if (this.dates.length)\n				this.viewDate = new Date(this.dates.get(-1));\n			else if (this.viewDate < this.o.startDate)\n				this.viewDate = new Date(this.o.startDate);\n			else if (this.viewDate > this.o.endDate)\n				this.viewDate = new Date(this.o.endDate);\n\n			if (fromArgs){\n				// setting date by clicking\n				this.setValue();\n			}\n			else if (dates.length){\n				// setting date by typing\n				if (String(oldDates) !== String(this.dates))\n					this._trigger('changeDate');\n			}\n			if (!this.dates.length && oldDates.length)\n				this._trigger('clearDate');\n\n			this.fill();\n		},\n\n		fillDow: function(){\n			var dowCnt = this.o.weekStart,\n				html = '<tr>';\n			if (this.o.calendarWeeks){\n				var cell = '<th class=\"cw\">&nbsp;</th>';\n				html += cell;\n				this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);\n			}\n			while (dowCnt < this.o.weekStart + 7){\n				html += '<th class=\"dow\">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';\n			}\n			html += '</tr>';\n			this.picker.find('.datepicker-days thead').append(html);\n		},\n\n		fillMonths: function(){\n			var html = '',\n			i = 0;\n			while (i < 12){\n				html += '<span class=\"month\">'+dates[this.o.language].monthsShort[i++]+'</span>';\n			}\n			this.picker.find('.datepicker-months td').html(html);\n		},\n\n		setRange: function(range){\n			if (!range || !range.length)\n				delete this.range;\n			else\n				this.range = $.map(range, function(d){\n					return d.valueOf();\n				});\n			this.fill();\n		},\n\n		getClassNames: function(date){\n			var cls = [],\n				year = this.viewDate.getUTCFullYear(),\n				month = this.viewDate.getUTCMonth(),\n				today = new Date();\n			if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)){\n				cls.push('old');\n			}\n			else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)){\n				cls.push('new');\n			}\n			if (this.focusDate && date.valueOf() === this.focusDate.valueOf())\n				cls.push('focused');\n			// Compare internal UTC date with local today, not UTC today\n			if (this.o.todayHighlight &&\n				date.getUTCFullYear() === today.getFullYear() &&\n				date.getUTCMonth() === today.getMonth() &&\n				date.getUTCDate() === today.getDate()){\n				cls.push('today');\n			}\n			if (this.dates.contains(date) !== -1)\n				cls.push('active');\n			if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||\n				$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1){\n				cls.push('disabled');\n			}\n			if (this.range){\n				if (date > this.range[0] && date < this.range[this.range.length-1]){\n					cls.push('range');\n				}\n				if ($.inArray(date.valueOf(), this.range) !== -1){\n					cls.push('selected');\n				}\n			}\n			return cls;\n		},\n\n		fill: function(){\n			var d = new Date(this.viewDate),\n				year = d.getUTCFullYear(),\n				month = d.getUTCMonth(),\n				startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,\n				startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,\n				endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,\n				endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,\n				todaytxt = dates[this.o.language].today || dates['en'].today || '',\n				cleartxt = dates[this.o.language].clear || dates['en'].clear || '',\n				tooltip;\n			this.picker.find('.datepicker-days thead th.datepicker-switch')\n						.text(dates[this.o.language].months[month]+' '+year);\n			this.picker.find('tfoot th.today')\n						.text(todaytxt)\n						.toggle(this.o.todayBtn !== false);\n			this.picker.find('tfoot th.clear')\n						.text(cleartxt)\n						.toggle(this.o.clearBtn !== false);\n			this.updateNavArrows();\n			this.fillMonths();\n			var prevMonth = UTCDate(year, month-1, 28),\n				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());\n			prevMonth.setUTCDate(day);\n			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);\n			var nextMonth = new Date(prevMonth);\n			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\n			nextMonth = nextMonth.valueOf();\n			var html = [];\n			var clsName;\n			while (prevMonth.valueOf() < nextMonth){\n				if (prevMonth.getUTCDay() === this.o.weekStart){\n					html.push('<tr>');\n					if (this.o.calendarWeeks){\n						// ISO 8601: First week contains first thursday.\n						// ISO also states week starts on Monday, but we can be more abstract here.\n						var\n							// Start of current week: based on weekstart/current date\n							ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),\n							// Thursday of this week\n							th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),\n							// First Thursday of year, year from thursday\n							yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),\n							// Calendar week: ms between thursdays, div ms per day, div 7 days\n							calWeek =  (th - yth) / 864e5 / 7 + 1;\n						html.push('<td class=\"cw\">'+ calWeek +'</td>');\n\n					}\n				}\n				clsName = this.getClassNames(prevMonth);\n				clsName.push('day');\n\n				if (this.o.beforeShowDay !== $.noop){\n					var before = this.o.beforeShowDay(this._utc_to_local(prevMonth));\n					if (before === undefined)\n						before = {};\n					else if (typeof(before) === 'boolean')\n						before = {enabled: before};\n					else if (typeof(before) === 'string')\n						before = {classes: before};\n					if (before.enabled === false)\n						clsName.push('disabled');\n					if (before.classes)\n						clsName = clsName.concat(before.classes.split(/\\s+/));\n					if (before.tooltip)\n						tooltip = before.tooltip;\n				}\n\n				clsName = $.unique(clsName);\n				html.push('<td class=\"'+clsName.join(' ')+'\"' + (tooltip ? ' title=\"'+tooltip+'\"' : '') + '>'+prevMonth.getUTCDate() + '</td>');\n				if (prevMonth.getUTCDay() === this.o.weekEnd){\n					html.push('</tr>');\n				}\n				prevMonth.setUTCDate(prevMonth.getUTCDate()+1);\n			}\n			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));\n\n			var months = this.picker.find('.datepicker-months')\n						.find('th:eq(1)')\n							.text(year)\n							.end()\n						.find('span').removeClass('active');\n\n			$.each(this.dates, function(i, d){\n				if (d.getUTCFullYear() === year)\n					months.eq(d.getUTCMonth()).addClass('active');\n			});\n\n			if (year < startYear || year > endYear){\n				months.addClass('disabled');\n			}\n			if (year === startYear){\n				months.slice(0, startMonth).addClass('disabled');\n			}\n			if (year === endYear){\n				months.slice(endMonth+1).addClass('disabled');\n			}\n\n			html = '';\n			year = parseInt(year/10, 10) * 10;\n			var yearCont = this.picker.find('.datepicker-years')\n								.find('th:eq(1)')\n									.text(year + '-' + (year + 9))\n									.end()\n								.find('td');\n			year -= 1;\n			var years = $.map(this.dates, function(d){\n					return d.getUTCFullYear();\n				}),\n				classes;\n			for (var i = -1; i < 11; i++){\n				classes = ['year'];\n				if (i === -1)\n					classes.push('old');\n				else if (i === 10)\n					classes.push('new');\n				if ($.inArray(year, years) !== -1)\n					classes.push('active');\n				if (year < startYear || year > endYear)\n					classes.push('disabled');\n				html += '<span class=\"' + classes.join(' ') + '\">'+year+'</span>';\n				year += 1;\n			}\n			yearCont.html(html);\n		},\n\n		updateNavArrows: function(){\n			if (!this._allow_update)\n				return;\n\n			var d = new Date(this.viewDate),\n				year = d.getUTCFullYear(),\n				month = d.getUTCMonth();\n			switch (this.viewMode){\n				case 0:\n					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()){\n						this.picker.find('.prev').css({visibility: 'hidden'});\n					}\n					else {\n						this.picker.find('.prev').css({visibility: 'visible'});\n					}\n					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()){\n						this.picker.find('.next').css({visibility: 'hidden'});\n					}\n					else {\n						this.picker.find('.next').css({visibility: 'visible'});\n					}\n					break;\n				case 1:\n				case 2:\n					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()){\n						this.picker.find('.prev').css({visibility: 'hidden'});\n					}\n					else {\n						this.picker.find('.prev').css({visibility: 'visible'});\n					}\n					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()){\n						this.picker.find('.next').css({visibility: 'hidden'});\n					}\n					else {\n						this.picker.find('.next').css({visibility: 'visible'});\n					}\n					break;\n			}\n		},\n\n		click: function(e){\n			e.preventDefault();\n			var target = $(e.target).closest('span, td, th'),\n				year, month, day;\n			if (target.length === 1){\n				switch (target[0].nodeName.toLowerCase()){\n					case 'th':\n						switch (target[0].className){\n							case 'datepicker-switch':\n								this.showMode(1);\n								break;\n							case 'prev':\n							case 'next':\n								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);\n								switch (this.viewMode){\n									case 0:\n										this.viewDate = this.moveMonth(this.viewDate, dir);\n										this._trigger('changeMonth', this.viewDate);\n										break;\n									case 1:\n									case 2:\n										this.viewDate = this.moveYear(this.viewDate, dir);\n										if (this.viewMode === 1)\n											this._trigger('changeYear', this.viewDate);\n										break;\n								}\n								this.fill();\n								break;\n							case 'today':\n								var date = new Date();\n								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n\n								this.showMode(-2);\n								var which = this.o.todayBtn === 'linked' ? null : 'view';\n								this._setDate(date, which);\n								break;\n							case 'clear':\n								var element;\n								if (this.isInput)\n									element = this.element;\n								else if (this.component)\n									element = this.element.find('input');\n								if (element)\n									element.val(\"\").change();\n								this.update();\n								this._trigger('changeDate');\n								if (this.o.autoclose)\n									this.hide();\n								break;\n						}\n						break;\n					case 'span':\n						if (!target.is('.disabled')){\n							this.viewDate.setUTCDate(1);\n							if (target.is('.month')){\n								day = 1;\n								month = target.parent().find('span').index(target);\n								year = this.viewDate.getUTCFullYear();\n								this.viewDate.setUTCMonth(month);\n								this._trigger('changeMonth', this.viewDate);\n								if (this.o.minViewMode === 1){\n									this._setDate(UTCDate(year, month, day));\n								}\n							}\n							else {\n								day = 1;\n								month = 0;\n								year = parseInt(target.text(), 10)||0;\n								this.viewDate.setUTCFullYear(year);\n								this._trigger('changeYear', this.viewDate);\n								if (this.o.minViewMode === 2){\n									this._setDate(UTCDate(year, month, day));\n								}\n							}\n							this.showMode(-1);\n							this.fill();\n						}\n						break;\n					case 'td':\n						if (target.is('.day') && !target.is('.disabled')){\n							day = parseInt(target.text(), 10)||1;\n							year = this.viewDate.getUTCFullYear();\n							month = this.viewDate.getUTCMonth();\n							if (target.is('.old')){\n								if (month === 0){\n									month = 11;\n									year -= 1;\n								}\n								else {\n									month -= 1;\n								}\n							}\n							else if (target.is('.new')){\n								if (month === 11){\n									month = 0;\n									year += 1;\n								}\n								else {\n									month += 1;\n								}\n							}\n							this._setDate(UTCDate(year, month, day));\n						}\n						break;\n				}\n			}\n			if (this.picker.is(':visible') && this._focused_from){\n				$(this._focused_from).focus();\n			}\n			delete this._focused_from;\n		},\n\n		_toggle_multidate: function(date){\n			var ix = this.dates.contains(date);\n			if (!date){\n				this.dates.clear();\n			}\n			else if (ix !== -1){\n				this.dates.remove(ix);\n			}\n			else {\n				this.dates.push(date);\n			}\n			if (typeof this.o.multidate === 'number')\n				while (this.dates.length > this.o.multidate)\n					this.dates.remove(0);\n		},\n\n		_setDate: function(date, which){\n			if (!which || which === 'date')\n				this._toggle_multidate(date && new Date(date));\n			if (!which || which  === 'view')\n				this.viewDate = date && new Date(date);\n\n			this.fill();\n			this.setValue();\n			this._trigger('changeDate');\n			var element;\n			if (this.isInput){\n				element = this.element;\n			}\n			else if (this.component){\n				element = this.element.find('input');\n			}\n			if (element){\n				element.change();\n			}\n			if (this.o.autoclose && (!which || which === 'date')){\n				this.hide();\n			}\n		},\n\n		moveMonth: function(date, dir){\n			if (!date)\n				return undefined;\n			if (!dir)\n				return date;\n			var new_date = new Date(date.valueOf()),\n				day = new_date.getUTCDate(),\n				month = new_date.getUTCMonth(),\n				mag = Math.abs(dir),\n				new_month, test;\n			dir = dir > 0 ? 1 : -1;\n			if (mag === 1){\n				test = dir === -1\n					// If going back one month, make sure month is not current month\n					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\n					? function(){\n						return new_date.getUTCMonth() === month;\n					}\n					// If going forward one month, make sure month is as expected\n					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\n					: function(){\n						return new_date.getUTCMonth() !== new_month;\n					};\n				new_month = month + dir;\n				new_date.setUTCMonth(new_month);\n				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\n				if (new_month < 0 || new_month > 11)\n					new_month = (new_month + 12) % 12;\n			}\n			else {\n				// For magnitudes >1, move one month at a time...\n				for (var i=0; i < mag; i++)\n					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\n					new_date = this.moveMonth(new_date, dir);\n				// ...then reset the day, keeping it in the new month\n				new_month = new_date.getUTCMonth();\n				new_date.setUTCDate(day);\n				test = function(){\n					return new_month !== new_date.getUTCMonth();\n				};\n			}\n			// Common date-resetting loop -- if date is beyond end of month, make it\n			// end of month\n			while (test()){\n				new_date.setUTCDate(--day);\n				new_date.setUTCMonth(new_month);\n			}\n			return new_date;\n		},\n\n		moveYear: function(date, dir){\n			return this.moveMonth(date, dir*12);\n		},\n\n		dateWithinRange: function(date){\n			return date >= this.o.startDate && date <= this.o.endDate;\n		},\n\n		keydown: function(e){\n			if (this.picker.is(':not(:visible)')){\n				if (e.keyCode === 27) // allow escape to hide and re-show picker\n					this.show();\n				return;\n			}\n			var dateChanged = false,\n				dir, newDate, newViewDate,\n				focusDate = this.focusDate || this.viewDate;\n			switch (e.keyCode){\n				case 27: // escape\n					if (this.focusDate){\n						this.focusDate = null;\n						this.viewDate = this.dates.get(-1) || this.viewDate;\n						this.fill();\n					}\n					else\n						this.hide();\n					e.preventDefault();\n					break;\n				case 37: // left\n				case 39: // right\n					if (!this.o.keyboardNavigation)\n						break;\n					dir = e.keyCode === 37 ? -1 : 1;\n					if (e.ctrlKey){\n						newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);\n						newViewDate = this.moveYear(focusDate, dir);\n						this._trigger('changeYear', this.viewDate);\n					}\n					else if (e.shiftKey){\n						newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);\n						newViewDate = this.moveMonth(focusDate, dir);\n						this._trigger('changeMonth', this.viewDate);\n					}\n					else {\n						newDate = new Date(this.dates.get(-1) || UTCToday());\n						newDate.setUTCDate(newDate.getUTCDate() + dir);\n						newViewDate = new Date(focusDate);\n						newViewDate.setUTCDate(focusDate.getUTCDate() + dir);\n					}\n					if (this.dateWithinRange(newDate)){\n						this.focusDate = this.viewDate = newViewDate;\n						this.setValue();\n						this.fill();\n						e.preventDefault();\n					}\n					break;\n				case 38: // up\n				case 40: // down\n					if (!this.o.keyboardNavigation)\n						break;\n					dir = e.keyCode === 38 ? -1 : 1;\n					if (e.ctrlKey){\n						newDate = this.moveYear(this.dates.get(-1) || UTCToday(), dir);\n						newViewDate = this.moveYear(focusDate, dir);\n						this._trigger('changeYear', this.viewDate);\n					}\n					else if (e.shiftKey){\n						newDate = this.moveMonth(this.dates.get(-1) || UTCToday(), dir);\n						newViewDate = this.moveMonth(focusDate, dir);\n						this._trigger('changeMonth', this.viewDate);\n					}\n					else {\n						newDate = new Date(this.dates.get(-1) || UTCToday());\n						newDate.setUTCDate(newDate.getUTCDate() + dir * 7);\n						newViewDate = new Date(focusDate);\n						newViewDate.setUTCDate(focusDate.getUTCDate() + dir * 7);\n					}\n					if (this.dateWithinRange(newDate)){\n						this.focusDate = this.viewDate = newViewDate;\n						this.setValue();\n						this.fill();\n						e.preventDefault();\n					}\n					break;\n				case 32: // spacebar\n					// Spacebar is used in manually typing dates in some formats.\n					// As such, its behavior should not be hijacked.\n					break;\n				case 13: // enter\n					focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;\n					this._toggle_multidate(focusDate);\n					dateChanged = true;\n					this.focusDate = null;\n					this.viewDate = this.dates.get(-1) || this.viewDate;\n					this.setValue();\n					this.fill();\n					if (this.picker.is(':visible')){\n						e.preventDefault();\n						if (this.o.autoclose)\n							this.hide();\n					}\n					break;\n				case 9: // tab\n					this.focusDate = null;\n					this.viewDate = this.dates.get(-1) || this.viewDate;\n					this.fill();\n					this.hide();\n					break;\n			}\n			if (dateChanged){\n				if (this.dates.length)\n					this._trigger('changeDate');\n				else\n					this._trigger('clearDate');\n				var element;\n				if (this.isInput){\n					element = this.element;\n				}\n				else if (this.component){\n					element = this.element.find('input');\n				}\n				if (element){\n					element.change();\n				}\n			}\n		},\n\n		showMode: function(dir){\n			if (dir){\n				this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));\n			}\n			this.picker\n				.find('>div')\n				.hide()\n				.filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName)\n					.css('display', 'block');\n			this.updateNavArrows();\n		}\n	};\n\n	var DateRangePicker = function(element, options){\n		this.element = $(element);\n		this.inputs = $.map(options.inputs, function(i){\n			return i.jquery ? i[0] : i;\n		});\n		delete options.inputs;\n\n		$(this.inputs)\n			.datepicker(options)\n			.bind('changeDate', $.proxy(this.dateUpdated, this));\n\n		this.pickers = $.map(this.inputs, function(i){\n			return $(i).data('datepicker');\n		});\n		this.updateDates();\n	};\n	DateRangePicker.prototype = {\n		updateDates: function(){\n			this.dates = $.map(this.pickers, function(i){\n				return i.getUTCDate();\n			});\n			this.updateRanges();\n		},\n		updateRanges: function(){\n			var range = $.map(this.dates, function(d){\n				return d.valueOf();\n			});\n			$.each(this.pickers, function(i, p){\n				p.setRange(range);\n			});\n		},\n		dateUpdated: function(e){\n			// `this.updating` is a workaround for preventing infinite recursion\n			// between `changeDate` triggering and `setUTCDate` calling.  Until\n			// there is a better mechanism.\n			if (this.updating)\n				return;\n			this.updating = true;\n\n			var dp = $(e.target).data('datepicker'),\n				new_date = dp.getUTCDate(),\n				i = $.inArray(e.target, this.inputs),\n				l = this.inputs.length;\n			if (i === -1)\n				return;\n\n			$.each(this.pickers, function(i, p){\n				if (!p.getUTCDate())\n					p.setUTCDate(new_date);\n			});\n\n			if (new_date < this.dates[i]){\n				// Date being moved earlier/left\n				while (i >= 0 && new_date < this.dates[i]){\n					this.pickers[i--].setUTCDate(new_date);\n				}\n			}\n			else if (new_date > this.dates[i]){\n				// Date being moved later/right\n				while (i < l && new_date > this.dates[i]){\n					this.pickers[i++].setUTCDate(new_date);\n				}\n			}\n			this.updateDates();\n\n			delete this.updating;\n		},\n		remove: function(){\n			$.map(this.pickers, function(p){ p.remove(); });\n			delete this.element.data().datepicker;\n		}\n	};\n\n	function opts_from_el(el, prefix){\n		// Derive options from element data-attrs\n		var data = $(el).data(),\n			out = {}, inkey,\n			replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');\n		prefix = new RegExp('^' + prefix.toLowerCase());\n		function re_lower(_,a){\n			return a.toLowerCase();\n		}\n		for (var key in data)\n			if (prefix.test(key)){\n				inkey = key.replace(replace, re_lower);\n				out[inkey] = data[key];\n			}\n		return out;\n	}\n\n	function opts_from_locale(lang){\n		// Derive options from locale plugins\n		var out = {};\n		// Check if \"de-DE\" style date is available, if not language should\n		// fallback to 2 letter code eg \"de\"\n		if (!dates[lang]){\n			lang = lang.split('-')[0];\n			if (!dates[lang])\n				return;\n		}\n		var d = dates[lang];\n		$.each(locale_opts, function(i,k){\n			if (k in d)\n				out[k] = d[k];\n		});\n		return out;\n	}\n\n	var old = $.fn.datepicker;\n	$.fn.datepicker = function(option){\n		var args = Array.apply(null, arguments);\n		args.shift();\n		var internal_return;\n		this.each(function(){\n			var $this = $(this),\n				data = $this.data('datepicker'),\n				options = typeof option === 'object' && option;\n			if (!data){\n				var elopts = opts_from_el(this, 'date'),\n					// Preliminary otions\n					xopts = $.extend({}, defaults, elopts, options),\n					locopts = opts_from_locale(xopts.language),\n					// Options priority: js args, data-attrs, locales, defaults\n					opts = $.extend({}, defaults, locopts, elopts, options);\n				if ($this.is('.input-daterange') || opts.inputs){\n					var ropts = {\n						inputs: opts.inputs || $this.find('input').toArray()\n					};\n					$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));\n				}\n				else {\n					$this.data('datepicker', (data = new Datepicker(this, opts)));\n				}\n			}\n			if (typeof option === 'string' && typeof data[option] === 'function'){\n				internal_return = data[option].apply(data, args);\n				if (internal_return !== undefined)\n					return false;\n			}\n		});\n		if (internal_return !== undefined)\n			return internal_return;\n		else\n			return this;\n	};\n\n	var defaults = $.fn.datepicker.defaults = {\n		autoclose: false,\n		beforeShowDay: $.noop,\n		calendarWeeks: false,\n		clearBtn: false,\n		daysOfWeekDisabled: [],\n		endDate: Infinity,\n		forceParse: true,\n		format: 'mm/dd/yyyy',\n		keyboardNavigation: true,\n		language: 'en',\n		minViewMode: 0,\n		multidate: false,\n		multidateSeparator: ',',\n		orientation: \"auto\",\n		rtl: false,\n		startDate: -Infinity,\n		startView: 0,\n		todayBtn: false,\n		todayHighlight: false,\n		weekStart: 0\n	};\n	var locale_opts = $.fn.datepicker.locale_opts = [\n		'format',\n		'rtl',\n		'weekStart'\n	];\n	$.fn.datepicker.Constructor = Datepicker;\n	var dates = $.fn.datepicker.dates = {\n		en: {\n			days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n			daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n			daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\n			months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n			monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n			today: \"Today\",\n			clear: \"Clear\"\n		}\n	};\n\n	var DPGlobal = {\n		modes: [\n			{\n				clsName: 'days',\n				navFnc: 'Month',\n				navStep: 1\n			},\n			{\n				clsName: 'months',\n				navFnc: 'FullYear',\n				navStep: 1\n			},\n			{\n				clsName: 'years',\n				navFnc: 'FullYear',\n				navStep: 10\n		}],\n		isLeapYear: function(year){\n			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\n		},\n		getDaysInMonth: function(year, month){\n			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n		},\n		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,\n		nonpunctuation: /[^ -\\/:-@\\[\\u3400-\\u9fff-`{-~\\t\\n\\r]+/g,\n		parseFormat: function(format){\n			// IE treats \\0 as a string end in inputs (truncating the value),\n			// so it's a bad format delimiter, anyway\n			var separators = format.replace(this.validParts, '\\0').split('\\0'),\n				parts = format.match(this.validParts);\n			if (!separators || !separators.length || !parts || parts.length === 0){\n				throw new Error(\"Invalid date format.\");\n			}\n			return {separators: separators, parts: parts};\n		},\n		parseDate: function(date, format, language){\n			if (!date)\n				return undefined;\n			if (date instanceof Date)\n				return date;\n			if (typeof format === 'string')\n				format = DPGlobal.parseFormat(format);\n			var part_re = /([\\-+]\\d+)([dmwy])/,\n				parts = date.match(/([\\-+]\\d+)([dmwy])/g),\n				part, dir, i;\n			if (/^[\\-+]\\d+[dmwy]([\\s,]+[\\-+]\\d+[dmwy])*$/.test(date)){\n				date = new Date();\n				for (i=0; i < parts.length; i++){\n					part = part_re.exec(parts[i]);\n					dir = parseInt(part[1]);\n					switch (part[2]){\n						case 'd':\n							date.setUTCDate(date.getUTCDate() + dir);\n							break;\n						case 'm':\n							date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);\n							break;\n						case 'w':\n							date.setUTCDate(date.getUTCDate() + dir * 7);\n							break;\n						case 'y':\n							date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);\n							break;\n					}\n				}\n				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n			}\n			parts = date && date.match(this.nonpunctuation) || [];\n			date = new Date();\n			var parsed = {},\n				setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],\n				setters_map = {\n					yyyy: function(d,v){\n						return d.setUTCFullYear(v);\n					},\n					yy: function(d,v){\n						return d.setUTCFullYear(2000+v);\n					},\n					m: function(d,v){\n						if (isNaN(d))\n							return d;\n						v -= 1;\n						while (v < 0) v += 12;\n						v %= 12;\n						d.setUTCMonth(v);\n						while (d.getUTCMonth() !== v)\n							d.setUTCDate(d.getUTCDate()-1);\n						return d;\n					},\n					d: function(d,v){\n						return d.setUTCDate(v);\n					}\n				},\n				val, filtered;\n			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\n			setters_map['dd'] = setters_map['d'];\n			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n			var fparts = format.parts.slice();\n			// Remove noop parts\n			if (parts.length !== fparts.length){\n				fparts = $(fparts).filter(function(i,p){\n					return $.inArray(p, setters_order) !== -1;\n				}).toArray();\n			}\n			// Process remainder\n			function match_part(){\n				var m = this.slice(0, parts[i].length),\n					p = parts[i].slice(0, m.length);\n				return m === p;\n			}\n			if (parts.length === fparts.length){\n				var cnt;\n				for (i=0, cnt = fparts.length; i < cnt; i++){\n					val = parseInt(parts[i], 10);\n					part = fparts[i];\n					if (isNaN(val)){\n						switch (part){\n							case 'MM':\n								filtered = $(dates[language].months).filter(match_part);\n								val = $.inArray(filtered[0], dates[language].months) + 1;\n								break;\n							case 'M':\n								filtered = $(dates[language].monthsShort).filter(match_part);\n								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;\n								break;\n						}\n					}\n					parsed[part] = val;\n				}\n				var _date, s;\n				for (i=0; i < setters_order.length; i++){\n					s = setters_order[i];\n					if (s in parsed && !isNaN(parsed[s])){\n						_date = new Date(date);\n						setters_map[s](_date, parsed[s]);\n						if (!isNaN(_date))\n							date = _date;\n					}\n				}\n			}\n			return date;\n		},\n		formatDate: function(date, format, language){\n			if (!date)\n				return '';\n			if (typeof format === 'string')\n				format = DPGlobal.parseFormat(format);\n			var val = {\n				d: date.getUTCDate(),\n				D: dates[language].daysShort[date.getUTCDay()],\n				DD: dates[language].days[date.getUTCDay()],\n				m: date.getUTCMonth() + 1,\n				M: dates[language].monthsShort[date.getUTCMonth()],\n				MM: dates[language].months[date.getUTCMonth()],\n				yy: date.getUTCFullYear().toString().substring(2),\n				yyyy: date.getUTCFullYear()\n			};\n			val.dd = (val.d < 10 ? '0' : '') + val.d;\n			val.mm = (val.m < 10 ? '0' : '') + val.m;\n			date = [];\n			var seps = $.extend([], format.separators);\n			for (var i=0, cnt = format.parts.length; i <= cnt; i++){\n				if (seps.length)\n					date.push(seps.shift());\n				date.push(val[format.parts[i]]);\n			}\n			return date.join('');\n		},\n		headTemplate: '<thead>'+\n							'<tr>'+\n								'<th class=\"prev\">&laquo;</th>'+\n								'<th colspan=\"5\" class=\"datepicker-switch\"></th>'+\n								'<th class=\"next\">&raquo;</th>'+\n							'</tr>'+\n						'</thead>',\n		contTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\n		footTemplate: '<tfoot>'+\n							'<tr>'+\n								'<th colspan=\"7\" class=\"today\"></th>'+\n							'</tr>'+\n							'<tr>'+\n								'<th colspan=\"7\" class=\"clear\"></th>'+\n							'</tr>'+\n						'</tfoot>'\n	};\n	DPGlobal.template = '<div class=\"datepicker\">'+\n							'<div class=\"datepicker-days\">'+\n								'<table class=\" table-condensed\">'+\n									DPGlobal.headTemplate+\n									'<tbody></tbody>'+\n									DPGlobal.footTemplate+\n								'</table>'+\n							'</div>'+\n							'<div class=\"datepicker-months\">'+\n								'<table class=\"table-condensed\">'+\n									DPGlobal.headTemplate+\n									DPGlobal.contTemplate+\n									DPGlobal.footTemplate+\n								'</table>'+\n							'</div>'+\n							'<div class=\"datepicker-years\">'+\n								'<table class=\"table-condensed\">'+\n									DPGlobal.headTemplate+\n									DPGlobal.contTemplate+\n									DPGlobal.footTemplate+\n								'</table>'+\n							'</div>'+\n						'</div>';\n\n	$.fn.datepicker.DPGlobal = DPGlobal;\n\n\n	/* DATEPICKER NO CONFLICT\n	* =================== */\n\n	$.fn.datepicker.noConflict = function(){\n		$.fn.datepicker = old;\n		return this;\n	};\n\n\n	/* DATEPICKER DATA-API\n	* ================== */\n\n	$(document).on(\n		'focus.datepicker.data-api click.datepicker.data-api',\n		'[data-provide=\"datepicker\"]',\n		function(e){\n			var $this = $(this);\n			if ($this.data('datepicker'))\n				return;\n			e.preventDefault();\n			// component click requires us to explicitly show it\n			$this.datepicker('show');\n		}\n	);\n	$(function(){\n		$('[data-provide=\"datepicker-inline\"]').datepicker();\n	});\n\n}(window.jQuery));";
var mod_pagespeed_tDF0vmOZK3 = "\n$(document).ready(function () {\n    \"use strict\";\n\n    var window_width = $(window).width(),\n        window_height = window.innerHeight,\n        header_height = $(\".default-header\").height(),\n        header_height_static = $(\".site-header.static\").outerHeight(),\n        fitscreen = window_height - header_height;\n\n\n    // $(\".fullscreen\").css(\"height\", window_height)\n    // $(\".fitscreen\").css(\"height\", fitscreen);\n\n    //-------- Fixed Header Js ----------//\n    $(window).on(\"scroll\", function () {\n        if ($(window).scrollTop() >= 80) {\n            $('.header-area').addClass('header-fixed');\n        }\n        else {\n            $('.header-area').removeClass('header-fixed');\n        }\n    });\n\n\n    //------- Active Nice Select --------//\n    $('select').niceSelect();\n\n    $('.img-pop-up').magnificPopup({\n        type: 'image',\n        gallery: {\n            enabled: true\n        }\n    });\n\n    // Gallery Pop Up\n    $('.photo-gallery-pop-up').magnificPopup({\n        type: 'image',\n        gallery: {\n            enabled: true\n        }\n    });\n\n    // Focus On Input\n    $('.reservation-calendar').on('click', function () {\n        $('#event_date').focus();\n    });\n\n    // Bootstrap Datepicker\n    $('.datepicker').datepicker();\n\n\n    // -------   Owl Carousel -----//0\n    function cta_slider() {\n        if ($('.cta-owl').length) {\n            $('.cta-owl').owlCarousel({\n                loop: true,\n                margin: 0,\n                items: 1,\n                nav: true,\n                autoplay: 2500,\n                smartSpeed: 1500,\n                dots: false,\n                navText: ['<img src=\"img/left-arrow.png\">', '<img src=\"img/right-arrow.png\">'],\n                responsiveClass: true\n            })\n        }\n    }\n    cta_slider();\n\n\n    // Select all links with hashes\n    $('a[href*=\"#\"]')\n        // Remove links that don't actually link to anything\n        .not('[href=\"#\"]')\n        .not('[href=\"#0\"]')\n        .click(function (event) {\n            // On-page links\n            if (\n                location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '')\n                &&\n                location.hostname == this.hostname\n            ) {\n                // Figure out element to scroll to\n                var target = $(this.hash);\n                target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n                // Does a scroll target exist?\n                if (target.length) {\n                    // Only prevent default if animation is actually gonna happen\n                    event.preventDefault();\n                    $('html, body').animate({\n                        scrollTop: target.offset().top - 60\n                    }, 1000, function () {\n                        // Callback after animation\n                        // Must change focus!\n                        var $target = $(target);\n                        $target.focus();\n                        if ($target.is(\":focus\")) { // Checking if the target was focused\n                            return false;\n                        } else {\n                            $target.attr('tabindex', '-1'); // Adding tabindex for elements not focusable\n                            $target.focus(); // Set focus again\n                        };\n                    });\n                }\n            }\n        });\n\n\n\n    var unavailableDates = [\n        { start: '2015-08-31', end: '2015-09-05' },\n        { start: '2015-09-11', end: '2015-09-15' },\n        { start: '2015-09-15', end: '2015-09-23' },\n        { start: '2015-10-01', end: '2015-10-07' }\n    ];\n\n    // Google Map\n    if (document.getElementById(\"contactMap\")) {\n\n        google.maps.event.addDomListener(window, 'load', init);\n\n        function init() {\n            // Basic options for a simple Google Map\n            // For more options see: https://developers.google.com/maps/documentation/javascript/reference#MapOptions\n            var mapOptions = {\n                // How zoomed in you want the map to start at (always required)\n                zoom: 11,\n\n                // The latitude and longitude to center the map (always required)\n                center: new google.maps.LatLng(40.6700, -73.9400), // New York\n\n                // How you would like to style the map. \n                // This is where you would paste any style found on Snazzy Maps.\n                styles: [{ \"featureType\": \"water\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#e9e9e9\" }, { \"lightness\": 17 }] }, { \"featureType\": \"landscape\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#f5f5f5\" }, { \"lightness\": 20 }] }, { \"featureType\": \"road.highway\", \"elementType\": \"geometry.fill\", \"stylers\": [{ \"color\": \"#ffffff\" }, { \"lightness\": 17 }] }, { \"featureType\": \"road.highway\", \"elementType\": \"geometry.stroke\", \"stylers\": [{ \"color\": \"#ffffff\" }, { \"lightness\": 29 }, { \"weight\": 0.2 }] }, { \"featureType\": \"road.arterial\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#ffffff\" }, { \"lightness\": 18 }] }, { \"featureType\": \"road.local\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#ffffff\" }, { \"lightness\": 16 }] }, { \"featureType\": \"poi\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#f5f5f5\" }, { \"lightness\": 21 }] }, { \"featureType\": \"poi.park\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#dedede\" }, { \"lightness\": 21 }] }, { \"elementType\": \"labels.text.stroke\", \"stylers\": [{ \"visibility\": \"on\" }, { \"color\": \"#ffffff\" }, { \"lightness\": 16 }] }, { \"elementType\": \"labels.text.fill\", \"stylers\": [{ \"saturation\": 36 }, { \"color\": \"#333333\" }, { \"lightness\": 40 }] }, { \"elementType\": \"labels.icon\", \"stylers\": [{ \"visibility\": \"off\" }] }, { \"featureType\": \"transit\", \"elementType\": \"geometry\", \"stylers\": [{ \"color\": \"#f2f2f2\" }, { \"lightness\": 19 }] }, { \"featureType\": \"administrative\", \"elementType\": \"geometry.fill\", \"stylers\": [{ \"color\": \"#fefefe\" }, { \"lightness\": 20 }] }, { \"featureType\": \"administrative\", \"elementType\": \"geometry.stroke\", \"stylers\": [{ \"color\": \"#fefefe\" }, { \"lightness\": 17 }, { \"weight\": 1.2 }] }]\n            };\n\n            // Get the HTML DOM element that will contain your map \n            // We are using a div with id=\"map\" seen below in the <body>\n            var mapElement = document.getElementById('contactMap');\n\n            // Create the Google Map using our element and options defined above\n            var map = new google.maps.Map(mapElement, mapOptions);\n\n            // Let's also add a marker while we're at it\n            var marker = new google.maps.Marker({\n                position: new google.maps.LatLng(40.6700, -73.9400),\n                map: map,\n                title: 'Snazzy!'\n            });\n        }\n    }\n\n\n    $('#mc_embed_signup').find('form').ajaxChimp();\n    // -------   Mail Send ajax\n    $(document).ready(function () {\n        var form = $('#myForm'); // contact form\n        var submit = $('.submit-btn'); // submit button\n        var alert = $('.alert-msg'); // alert div for show alert message\n\n        // form submit event\n        form.on('submit', function (e) {\n            e.preventDefault(); // prevent default form submit\n\n            $.ajax({\n                url: 'mail.php', // form action url\n                type: 'POST', // form submit method get/post\n                dataType: 'html', // request type html/json/xml\n                data: form.serialize(), // serialize form data\n                beforeSend: function () {\n                    alert.fadeOut();\n                    submit.html('Sending....'); // change submit button text\n                },\n                success: function (data) {\n                    alert.html(data).fadeIn(); // fade in response data\n                    form.trigger('reset'); // reset form\n                    submit.attr(\"style\", \"display: none !important\");; // reset submit button text\n                },\n                error: function (e) {\n                    console.log(e)\n                }\n            });\n        });\n    });\n\n\n\n\n});\n";
